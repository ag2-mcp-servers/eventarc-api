# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:04:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class CancelOperationRequest(BaseModel):
    pass


class CloudRunService(BaseModel):
    path: Optional[str] = Field(
        None,
        description='Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".',
    )
    region: Optional[str] = Field(
        None, description='Required. The region the Cloud Run service is deployed in.'
    )
    service: Optional[str] = Field(
        None,
        description='Required. The name of the Cloud run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.',
    )


class Destination(BaseModel):
    cloudRunService: Optional[CloudRunService] = Field(
        None,
        description='Cloud Run fully-managed service that receives the events. The service should be running in the same project as the trigger.',
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class MatchingCriteria(BaseModel):
    attribute: Optional[str] = Field(
        None,
        description="Required. The name of a CloudEvents attribute. Currently, only a subset of attributes can be specified. All triggers MUST provide a matching criteria for the 'type' attribute.",
    )
    value: Optional[str] = Field(
        None, description='Required. The value for the attribute.'
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class Pubsub(BaseModel):
    subscription: Optional[str] = Field(
        None,
        description='Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.',
    )
    topic: Optional[str] = Field(
        None,
        description='Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You may set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished` only. The topic you provide here will not be deleted by Eventarc at trigger deletion.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class Transport(BaseModel):
    pubsub: Optional[Pubsub] = Field(
        None,
        description='The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.',
    )


class Trigger(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation time.'
    )
    destination: Optional[Destination] = Field(
        None,
        description='Required. Destination specifies where the events should be sent to.',
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. User labels attached to the triggers that can be used to group resources.',
    )
    matchingCriteria: Optional[List[MatchingCriteria]] = Field(
        None,
        description='Required. Unordered list. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. The resource name of the trigger. Must be unique within the location on the project and must in `projects/{project}/locations/{location}/triggers/{trigger}` format.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description="Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have 'eventarc.events.receiveAuditLogV1Written' permission.",
    )
    transport: Optional[Transport] = Field(
        None,
        description='Output only. In order to deliver messages, Eventarc may use other Google Cloud products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last-modified time.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListTriggersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A page token that can be sent to ListTriggers to request the next page. If this is empty, then there are no more pages.',
    )
    triggers: Optional[List[Trigger]] = Field(
        None,
        description='The requested triggers, up to the number specified in `page_size`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Unreachable resources, if any.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )
